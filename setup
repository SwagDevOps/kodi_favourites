#!/usr/bin/env ruby
# frozen_string_literal: true

# Constants
ENV_PREFIX = 'KODI_FAVGEN_'
LIB_REPO = 'https://github.com/SwagDevOps/kodi_fav_gen.git'
UPGRADE_BRANCH = (ENV["#{ENV_PREFIX}_UPGRADE_BRANCH"] ||= 'master').freeze
UPDATE_BRANCH = (ENV["#{ENV_PREFIX}_UPDATE_BRANCH"] ||= 'master').freeze

# Dependencies (Ruby Core)
autoload(:Pathname, 'pathname')
autoload(:FileUtils, 'fileutils')

# Main process
class App
  def call
    Pathname.new(__FILE__).realpath.dirname.realpath.then do |path|
      Dir.chdir(path) do
        # process
        Pathname.new('ruby').expand_path.join(lib_name).tap do |lib_dir|
          fs.mkdir_p(lib_dir.dirname)
          (git.call('clone', LIB_REPO, lib_dir.to_path) unless lib_dir.directory?).then do
            Dir.chdir(lib_dir.to_path) { git.update(branch: UPGRADE_BRANCH) }
          end
        end

        git.update(branch: UPDATE_BRANCH)
      end
    end
  end

  class << self
    def call
      self.new.call
    end
  end

  protected

  # @return [String]
  def lib_name
    Pathname.new(LIB_REPO).basename('.git').to_s
  end

  # @return [Module<FileUtils::Verbose>, Module<FileUtils>]
  def fs
    FileUtils::Verbose
  end

  # @return [Git]
  def git
    Git.new
  end
end

# Simple wrapper built on top of git executable.
class Git
  def initialize
    self.tap do
      (ENV["#{ENV_PREFIX}_VCS_VERBOSE"] ||= 'false').then do |v|
        v == 'true' ? true : false
      end.then do
        @verbose = _1
      end
    end
  end

  # Call a command.
  #
  # Sample of use:
  #
  # ```
  # git.call('clone', repo_url, path, '--quiet', exception: true)
  # git.call('clean', '--force')
  # git.call('pull', '--quiet')
  # ```
  def call(*args, **opts)
    opts = optionize(opts, exception: true)

    ['git'].concat(args).then do |arguments|
      system(*arguments, exception: opts[:exception])
    end
  end

  # Force update (with clean) on current path.
  #
  # Sample of use:
  #
  # ```
  # Dir.chdir(vcs_path) do
  #   git.update(branch: 'master', quiet: true, exception: true)
  # end
  # ```
  #
  # @return [Boolean]
  def update(branch: 'main', **opts)
    opts = optionize(opts, exception: false, verbose: verbose?)

    true.tap do
      [
        %w[clean --force],
        %w[pull],
        ['checkout', branch.to_s]
      ].map do |args|
        args.concat([opts[:verbose] ? nil : '--quiet'].compact)
      end.each do |args|
        self.(*args, **opts).tap { return false unless _1 }
      end
    end
  end

  # Denote git is set in verbose mode (from config).
  #
  # @return [Boolean]
  def verbose?
    @verbose
  end

  protected

  # @return [Boolean]
  attr_reader :verbose

  # @param [Hash{Symbol => Object}] opts
  #
  # @return [Hash{Symbol => Object}]
  def optionize(opts, **defaults)
    opts.tap do
      defaults.each { |k, v| opts[k] = v unless opts.key?(k) }
    end
  end
end

App.call if __FILE__ == $0
